# IMPORTANTE: Sustituir [[TOKEN]] por un JWT válido antes de probar

### 1. Registro de usuario
POST http://localhost:3000/api/user/register
Content-Type: application/json

{
  "email": "ivan.martinez@live.u-tad.com",
  "password": "Password123"
}

### 2. Login (para obtener el token)
POST http://localhost:3000/api/user/login
Content-Type: application/json

{
  "email": "ivan.martinez@live.u-tad.com",
  "password": "Password123"
}

### 3. Validación del email (con token y código)
PUT http://localhost:3000/api/user/validation
Content-Type: application/json
Authorization: Bearer [[TOKEN]]

{
  "code": "262683"
}

### 4. Onboarding - Datos personales
PUT http://localhost:3000/api/user/register
Content-Type: application/json
Authorization: Bearer [[TOKEN]]

{
  "name": "Juan",
  "surname": "Pérez",
  "nif": "12345678Z"
}

### 5. Datos de la compañía
PATCH http://localhost:3000/api/user/company
Content-Type: application/json
Authorization: Bearer [[TOKEN]]

{
  "name": "Empresa S.A.",
  "cif": "B12345678",
  "address": "Calle Falsa 123"
}

### Subida de logo
PATCH http://localhost:3000/api/user/logo
Authorization: Bearer [[TOKEN]]
Content-Type: multipart/form-data; boundary=----WebKitFormBoundary7MA4YWxkTrZu0gW

------WebKitFormBoundary7MA4YWxkTrZu0gW
Content-Disposition: form-data; name="logo"; filename="logo.png"
Content-Type: image/png

< ./test_uploads/logo.png
------WebKitFormBoundary7MA4YWxkTrZu0gW--

### Obtener datos del usuario autenticado
GET http://localhost:3000/api/user/me
Authorization: Bearer [[TOKEN]]

### Soft delete
DELETE http://localhost:3000/api/user
Authorization: Bearer [[TOKEN]]

### Hard delete
DELETE http://localhost:3000/api/user?soft=false
Authorization: Bearer [[TOKEN]]

### Iniciar recuperación
POST http://localhost:3000/api/user/recover
Content-Type: application/json

{
  "email": "test@example.com"
}

### Resetear contraseña
PUT http://localhost:3000/api/user/reset-password
Content-Type: application/json

{
  "token": "EL_TOKEN_QUE_VES_EN_CONSOLA",
  "newPassword": "NuevaPass123"
}

### Cambiar contraseña desde perfil (requiere login)
PATCH http://localhost:3000/api/user/password
Content-Type: application/json
Authorization: Bearer [[TOKEN]]

{
  "currentPassword": "NuevaPass123",
  "newPassword": "NuevaPassword456"
}

### Invitar a usuario como guest (requiere token del invitador)
POST http://localhost:3000/api/user/invite
Content-Type: application/json
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY3ZmVjNGIwNjJmYjhjMmYzNDUyNWNjYiIsImlhdCI6MTc0NDc0OTc4OSwiZXhwIjoxNzQ0NzUzMzg5fQ.PGduHjiCpxU5fB3ueMIahhkRAVPsMJUc2cSVJtPC1d0

{
  "email": "nuevo.invitado@live.u-tad.com"
}

### Crear nuevo cliente (requiere token de usuario verificado)
POST http://localhost:3000/api/client
Content-Type: application/json
Authorization: Bearer [[TOKEN]]

{
  "name": "Cliente Ejemplo S.L.",
  "cif": "B12345678",
  "address": "Calle Real 42",
  "contactEmail": "contacto@cliente.com",
  "contactPhone": "+34 600 123 456"
}

### Editar cliente existente
PUT http://localhost:3000/api/client/:id
Content-Type: application/json
Authorization: Bearer [[TOKEN]]

{
  "name": "Cliente Actualizado S.A.",
  "cif": "B87654321",
  "address": "Nueva Dirección 789",
  "contactEmail": "nuevoemail@cliente.com",
  "contactPhone": "+34 655 000 111"
}

### Obtener todos los clientes del usuario o de su compañía
GET http://localhost:3000/api/client
Authorization: Bearer [[TOKEN]]

### Obtener cliente específico por ID
GET http://localhost:3000/api/client/:id
Authorization: Bearer [[TOKEN]]

### Archivar cliente (soft delete por defecto)
DELETE http://localhost:3000/api/client/:id
Authorization: Bearer [[TOKEN]]

### Eliminar cliente permanentemente (hard delete)
DELETE http://localhost:3000/api/client/:id?soft=false
Authorization: Bearer [[TOKEN]]

### Obtener lista de clientes archivados (soft deleted)
GET http://localhost:3000/api/client/archived
Authorization: Bearer [[TOKEN]]

### Restaurar cliente archivado
PUT http://localhost:3000/api/client/restore/:id
Authorization: Bearer [[TOKEN]]
